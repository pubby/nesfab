/*
 * Copyright (c) 2023, Patrick Bene
 * This file is distributed under the Boost Software License, Version 1.0.
 * See LICENSE_1_0.txt or https://www.boost.org/LICENSE_1_0.txt 
 */

// This example uses trigonometry to have an object follow the player.

vars
    // Player variables:
    Coord[2] p = Coord[2](Coord(64, 64), Coord(128, 128))

mode main()
: nmi game_nmi
    palette = example_palette
    ppu_upload_palette()
    {PPUCTRL}(PPUCTRL_NMI_ON)

    while true
        nmi
        update_pads()
        move_player()
        update_sprites()

fn move_player()
    ct Int SPEED = 1

    if nmi_counter & 1
        return

    for U i = 0; i < 2; i += 1
        if pads[i].held & BUTTON_LEFT
            p[i].x -= SPEED
        else if pads[i].held & BUTTON_RIGHT
            p[i].x += SPEED

        if pads[i].held & BUTTON_UP
            p[i].y -= SPEED
        else if pads[i].held & BUTTON_DOWN
            p[i].y += SPEED

fn update_sprites()
    // Our stack index into OAM:
    U o = 0

    for U i = 0; i < 2; i += 1
        set_oam(o, p[i].x, p[i].y - 1, $00, 0)
        o += 4

    // Clear the remainder of OAM
    hide_oam(o)

nmi game_nmi()
    // Update OAM and poll the pads:
    ppu_upload_oam_poll_pads(0)

    // Reset the scroll
    ppu_reset_scroll(0, 0)

    // Turn on rendering:
    if overlap(Rect(p[0], Dimen(8, 8)), Rect(p[1], Dimen(8, 8)))
        {PPUMASK}(PPUMASK_SPR_ON | PPUMASK_NO_CLIP | PPUMASK_GRAYSCALE)
    else
        {PPUMASK}(PPUMASK_SPR_ON | PPUMASK_NO_CLIP)

chrrom
    U[16]($FF)
