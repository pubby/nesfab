/*
 * Copyright (c) 2022, Patrick Bene
 * This file is distributed under the Boost Software License, Version 1.0.
 * See LICENSE_1_0.txt or https://www.boost.org/LICENSE_1_0.txt 
 */

// Code implementing the puf music engine, version 1.

///////////////////////////////////////////////////////////////////////////////
// The following functions are defined: ///////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

// puf.init(U system_type)
// - Initializes the puf library. 
// - 'system_type' is one of the standard system enumeration values, e.g. SYSTEM_NTSC.

// puf.play_track(U track_id) U
// - Changes the current track to be played.
// - Returns the speed of the track.

// puf.stop(U unused)
// - Halts the current track.
// - 'unused' is a parameter which has no effect. It can be any value.

// puf.play_sfx(U sfx_id)
// - Assigns the specified sound effect to be played.

// puf.process(U enable) Bool
// - Call this once per frame to play the audio, ideally at the end of your NMI function.
// - 'enable' is a bitmask of which channels to play, along with a few other options:
// --- If enable has 'PUF_LOOP' set, the song will loop after completion.
// --- If you want the typical behavior, pass 'PUF_DEFAULT' as the 'enable' parameter.
// - Returns 'true' when the song ends and 'false' otherwise.

// puf.set_speed(U speed)
// - Sets the song's current speed to the desired value.

///////////////////////////////////////////////////////////////////////////////
// How to compose PUF music: //////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

// PUF audio is composed using FamiTracker (http://famitracker.com/)
// or using FamiStudio (https://famistudio.org/) with the FamiTracker tempo mode set.
// Both music and sound effects are exported via the "export text" feature,
// but sound effects also require "export nsf".

// Instead of using one .ftm file per song, 
// PUF expects all songs to be defined in the same file,
// naming them as desired in the "module properties" page.

// For music specifically, the following restrictions apply:
// - No effects are supported except D00.
// - The volume column is not supported.
// - Hi-pitch is not supported.
// - Non-absolute arpeggio is not supported.
// - Tempos besides 150 are not supported.
// - Speeds higher than 30 are not supported.
// - Speeds lower than 4 incur a performance cost.
// - Pattern "release" is not supported.
// - Loop points are not supported.

// Unlike music, sound effects support all effects, but cannot involve the DMC channel.
// Sound effects must have a short duration (250 frames or less), 
// and must be terminated using the C00 Famitracker effect.

ct U PUF_LOOP = %10000000
ct U PUF_EXPANSION = %01000000 // Counts for ALL expansion channels
ct U PUF_DEFAULT = $FF

ct Int _MMC5 = 1
ct Int _RNBW = 2

ct fn _calc_exp_channels() Int
    if __expansion_audio == _MMC5
        return 2
    else if __expansion_audio == _RNBW
        return 3
    return 0

ct Int _exp_channels = _calc_exp_channels()
ct Int _note_channels = 4 + _exp_channels
ct Int _channels = 5 + _exp_channels

vars
    AA puf_ptr_temp
    AA puf_trackv_ptr
    AA puf_note_table_ptr
    AA puf_square1_pattern_ptr
    AA puf_square2_pattern_ptr
    AA puf_triangle_pattern_ptr
    AA puf_noise_pattern_ptr
    AA puf_dpcm_pattern_ptr
    AA puf_exp1_pattern_ptr
    : +unused
    AA puf_exp2_pattern_ptr
    : +unused
    AA puf_exp3_pattern_ptr
    : +unused
    Bool puf_lock = false

ct AA _stack_0 = $100
ct AA _stack_1 = $100 + _note_channels*2
ct AA _stack_2 = $100 + _note_channels*4

ct AA puf_stack_mem = $108

ct AA puf_temp                = puf_stack_mem + 0
ct AA puf_bank                = puf_stack_mem + 1
ct AA puf_pattern_left        = puf_stack_mem + 2
ct AA puf_trackv_step          = puf_stack_mem + 3

ct AA puf_trackv_speed         = puf_stack_mem + 4 // Note: This may not equal the actual speed.
ct AA puf_trackv_start         = puf_stack_mem + 5 // 2 bytes
ct AA puf_trackv_end           = puf_stack_mem + 7 // 2 bytes
ct AA puf_pattern_size        = puf_stack_mem + 9
ct AA puf_enable              = puf_stack_mem + 10
ct AA puf_finished            = puf_stack_mem + 11

ct AA puf_inst_mem = puf_stack_mem + 12

ct AA puf_square1_note        = puf_inst_mem +  0
ct AA puf_square1_vol_duty_y  = puf_inst_mem +  1
ct AA puf_square1_arpeggio_y  = puf_inst_mem +  2
ct AA puf_square1_pitch_y     = puf_inst_mem +  3
ct AA puf_square1_pitch_bend  = puf_inst_mem +  4 // 2 bytes
ct AA puf_square1_pitch_hi    = puf_inst_mem +  6
ct AA puf_square1_stack       = puf_inst_mem +  7
ct AA puf_square1_stack_next  = puf_inst_mem +  8
ct AA puf_square1_mask        = puf_inst_mem +  9
 
ct AA puf_square2_note        = puf_inst_mem + 10
ct AA puf_square2_vol_duty_y  = puf_inst_mem + 11
ct AA puf_square2_arpeggio_y  = puf_inst_mem + 12
ct AA puf_square2_pitch_y     = puf_inst_mem + 13
ct AA puf_square2_pitch_bend  = puf_inst_mem + 14 // 2 bytes
ct AA puf_square2_pitch_hi    = puf_inst_mem + 16
ct AA puf_square2_stack       = puf_inst_mem + 17
ct AA puf_square2_stack_next  = puf_inst_mem + 18
ct AA puf_square2_mask        = puf_inst_mem + 19

ct AA puf_triangle_note       = puf_inst_mem + 20
ct AA puf_triangle_vol_duty_y = puf_inst_mem + 21
ct AA puf_triangle_arpeggio_y = puf_inst_mem + 22
ct AA puf_triangle_pitch_y    = puf_inst_mem + 23
ct AA puf_triangle_pitch_bend = puf_inst_mem + 24 // 2 bytes
ct AA puf_triangle_stack      = puf_inst_mem + 26
ct AA puf_triangle_stack_next = puf_inst_mem + 27
ct AA puf_triangle_mask       = puf_inst_mem + 28

ct AA puf_noise_note          = puf_inst_mem + 29
ct AA puf_noise_vol_duty_y    = puf_inst_mem + 30
ct AA puf_noise_arpeggio_y    = puf_inst_mem + 31
ct AA puf_noise_stack         = puf_inst_mem + 32
ct AA puf_noise_stack_next    = puf_inst_mem + 33
ct AA puf_noise_mask          = puf_inst_mem + 34

ct AA puf_dpcm_mask           = puf_inst_mem + 35

ct AA puf_exp_mem = puf_inst_mem + 36

ct AA puf_exp1_note        = puf_exp_mem +  0
ct AA puf_exp1_vol_duty_y  = puf_exp_mem +  1
ct AA puf_exp1_arpeggio_y  = puf_exp_mem +  2
ct AA puf_exp1_pitch_y     = puf_exp_mem +  3
ct AA puf_exp1_pitch_bend  = puf_exp_mem +  4 // 2 bytes
ct AA puf_exp1_pitch_hi    = puf_exp_mem +  6
ct AA puf_exp1_stack       = puf_exp_mem +  7
ct AA puf_exp1_stack_next  = puf_exp_mem +  8
ct AA puf_exp1_mask        = puf_exp_mem +  9

ct AA puf_exp2_note        = puf_exp_mem + 10
ct AA puf_exp2_vol_duty_y  = puf_exp_mem + 11
ct AA puf_exp2_arpeggio_y  = puf_exp_mem + 12
ct AA puf_exp2_pitch_y     = puf_exp_mem + 13
ct AA puf_exp2_pitch_bend  = puf_exp_mem + 14 // 2 bytes
ct AA puf_exp2_pitch_hi    = puf_exp_mem + 16
ct AA puf_exp2_stack       = puf_exp_mem + 17
ct AA puf_exp2_stack_next  = puf_exp_mem + 18
ct AA puf_exp2_mask        = puf_exp_mem + 19

ct AA puf_exp3_note        = puf_exp_mem + 20
ct AA puf_exp3_vol_duty_y  = puf_exp_mem + 21
ct AA puf_exp3_arpeggio_y  = puf_exp_mem + 22
ct AA puf_exp3_pitch_y     = puf_exp_mem + 23
ct AA puf_exp3_pitch_bend  = puf_exp_mem + 24 // 2 bytes
ct AA puf_exp3_pitch_hi    = puf_exp_mem + 26
ct AA puf_exp3_stack       = puf_exp_mem + 27
ct AA puf_exp3_stack_next  = puf_exp_mem + 28
ct AA puf_exp3_mask        = puf_exp_mem + 29

ct AA puf_instrument_ptrs   = puf_exp_mem + (10 * _exp_channels) // 24 bytes, + 4 bytes per channel

ct AAA puf_silent_instrument = &puf_instrument_0

data /puf

omni data /puf
    [] puf_ntsc_note_table
        UU[]($07F1,$077F,$0713,$06AD,$064D,$05F3,$059D,$054C,$0500,$04B8,$0474,$0434)
        UU[]($03F8,$03BF,$0389,$0356,$0326,$02F9,$02CE,$02A6,$0280,$025C,$023A,$021A)
        UU[]($01FB,$01DF,$01C4,$01AB,$0193,$017C,$0167,$0152,$013F,$012D,$011C,$010C)
        UU[]($00FD,$00EF,$00E1,$00D5,$00C9,$00BD,$00B3,$00A9,$009F,$0096,$008E,$0086)
        UU[]($007E,$0077,$0070,$006A,$0064,$005E,$0059,$0054,$004F,$004B,$0046,$0042)
        UU[]($003F,$003B,$0038,$0034,$0031,$002F,$002C,$0029,$0027,$0025,$0023,$0021)
        UU[]($001F,$001D,$001B,$001A,$0018,$0017,$0015,$0014,$0013,$0012,$0011,$0010)
        UU[]($000F,$000E,$000D)

    [] puf_pal_note_table
        UU[]($0760,$06F6,$0692,$0634,$05DB,$0586,$0537,$04EC,$04A5,$0462,$0423,$03E8)
        UU[]($03B0,$037B,$0349,$0319,$02ED,$02C3,$029B,$0275,$0252,$0231,$0211,$01F3)
        UU[]($01D7,$01BD,$01A4,$018C,$0176,$0161,$014D,$013A,$0129,$0118,$0108,$00F9)
        UU[]($00EB,$00DE,$00D1,$00C6,$00BA,$00B0,$00A6,$009D,$0094,$008B,$0084,$007C)
        UU[]($0075,$006E,$0068,$0062,$005D,$0057,$0052,$004E,$0049,$0045,$0041,$003E)
        UU[]($003A,$0037,$0034,$0031,$002E,$002B,$0029,$0026,$0024,$0022,$0020,$001E)
        UU[]($001D,$001B,$0019,$0018,$0016,$0015,$0014,$0013,$0012,$0011,$0010,$000F)
        UU[]($000E,$000D,$000C)

asm fn puf(U arg) Bool
: employs /puf
    label track_step_function_lo
        U(update_variables.a)
        U(update_triangle_noise.a)
        U(update_squares.a)
        U(update_pattern_ptrs.a)
        U[26](update_null.a)
        // After 30, feature a double-step for fast speeds:
        U(update_triangle_noise_variables.a)
        U(update_pattern_ptrs_squares.a)
        U(update_null.a)
        U(update_all.a)

    label track_step_function_hi
        U(update_variables.b)
        U(update_triangle_noise.b)
        U(update_squares.b)
        U(update_pattern_ptrs.b)
        U[26](update_null.b)
        // After 30, feature a double-step for fast speeds:
        U(update_triangle_noise_variables.b)
        U(update_pattern_ptrs_squares.b)
        U(update_null.b)
        U(update_all.b)

    label play_sfx
        inc &puf_lock
        ldx &arg
        lda &puf_sfx_lo, x
        sta &puf_ptr_temp.a
        lda &puf_sfx_hi, x
        sta &puf_ptr_temp.b
        ldy &puf_sfx_bank, x
        switch y

        ldy #0
        lda (&puf_ptr_temp.a), y
        lsr
        sta puf_temp
        iny
        bcc play_sfx_done_square1
        ldx #0
        stx puf_square1_stack_next
        ldx puf_square1_stack
        jsr write_sfx
        sta puf_square1_note
        jsr reset_square1
    label play_sfx_done_square1
        lsr puf_temp
        bcc play_sfx_done_square2
        ldx #0
        stx puf_square2_stack_next
        ldx puf_square2_stack
        jsr write_sfx
        sta puf_square2_note
        jsr reset_square2
    label play_sfx_done_square2
        lsr puf_temp
        bcc play_sfx_done_triangle
        ldx #0
        stx puf_triangle_stack_next
        ldx puf_triangle_stack
        jsr write_sfx
        sta puf_triangle_note
        jsr reset_triangle
    label play_sfx_done_triangle
        lsr puf_temp
        bcc play_sfx_done_noise
        ldx #0
        stx puf_noise_stack_next
        ldx puf_noise_stack
        jsr write_sfx
        sta puf_noise_note
        jsr reset_noise
    label play_sfx_done_noise
        if _exp_channels >= 1
            lsr puf_temp
            bcc play_sfx_done_exp1
            ldx #0
            stx puf_exp1_stack_next
            ldx puf_exp1_stack
            jsr write_sfx
            sta puf_exp1_note
            jsr reset_exp1
    label play_sfx_done_exp1
        if _exp_channels >= 2
            lsr puf_temp
            bcc play_sfx_done_exp2
            ldx #0
            stx puf_exp2_stack_next
            ldx puf_exp2_stack
            jsr write_sfx
            sta puf_exp2_note
            jsr reset_exp2
    label play_sfx_done_exp2
        if _exp_channels >= 3
            lsr puf_temp
            bcc play_sfx_done_exp3
            ldx #0
            stx puf_exp3_stack_next
            ldx puf_exp3_stack
            jsr write_sfx
            sta puf_exp3_note
            jsr reset_exp3
    label play_sfx_done_exp3

        jmp unlock


    label write_sfx
        lda (&puf_ptr_temp.a), y
        sta _stack_0, x
        iny
        lda (&puf_ptr_temp.a), y
        sta _stack_1, x
        iny
        lda (&puf_ptr_temp.a), y
        sta _stack_2, x
        iny
        lda (&puf_ptr_temp.a), y
        iny
        rts


    label reset_square1
        ldx #$FF
        stx puf_square1_pitch_hi
        inx
        stx puf_square1_pitch_bend+1
        stx puf_square1_pitch_bend+0
        inx
        stx puf_square1_pitch_y
        stx puf_square1_arpeggio_y
        stx puf_square1_vol_duty_y
        rts


    label reset_square2
        ldx #$FF
        stx puf_square2_pitch_hi
        inx
        stx puf_square2_pitch_bend+1
        stx puf_square2_pitch_bend+0
        inx
        stx puf_square2_pitch_y
        stx puf_square2_arpeggio_y
        stx puf_square2_vol_duty_y
        rts


    label reset_triangle
        ldx #0
        stx puf_triangle_pitch_bend+1
        stx puf_triangle_pitch_bend+0
        inx
        stx puf_triangle_pitch_y
        stx puf_triangle_arpeggio_y
        stx puf_triangle_vol_duty_y
        rts


    label reset_noise
        ldx #1
        stx puf_noise_arpeggio_y
        stx puf_noise_vol_duty_y
        rts

    label reset_exp1
        if _exp_channels >= 1
            ldx #$FF
            stx puf_exp1_pitch_hi
            inx
            stx puf_exp1_pitch_bend+1
            stx puf_exp1_pitch_bend+0
            inx
            stx puf_exp1_pitch_y
            stx puf_exp1_arpeggio_y
            stx puf_exp1_vol_duty_y
            rts

    label reset_exp2
        if _exp_channels >= 2
            ldx #$FF
            stx puf_exp2_pitch_hi
            inx
            stx puf_exp2_pitch_bend+1
            stx puf_exp2_pitch_bend+0
            inx
            stx puf_exp2_pitch_y
            stx puf_exp2_arpeggio_y
            stx puf_exp2_vol_duty_y
            rts

    label reset_exp3
        if _exp_channels >= 3
            ldx #$FF
            stx puf_exp3_pitch_hi
            inx
            stx puf_exp3_pitch_bend+1
            stx puf_exp3_pitch_bend+0
            inx
            stx puf_exp3_pitch_y
            stx puf_exp3_arpeggio_y
            stx puf_exp3_vol_duty_y
            rts

    label read_macro
        ldx #0
        iny
        tya
        cmp (&puf_ptr_temp.a, x) // Length
        bcc read_macro_done_loop
        ldy #1
        lda (&puf_ptr_temp.a), y // Loop
        tay
    label read_macro_done_loop
        lda (&puf_ptr_temp.a), y // Value
    label do_skip
        pha
        clc
        lda &puf_ptr_temp.a
        adc (&puf_ptr_temp.a, x)
        sta &puf_ptr_temp.a
        bcc read_macro_done_inc
        inc &puf_ptr_temp.b
        clc // leave carry clear
    label read_macro_done_inc
        pla
        rts


    label skip_macro
        ldx #0
        jmp do_skip

    label update_all
        jsr update_pattern_ptrs_squares
    label update_triangle_noise_variables
        jsr update_triangle_noise
    label update_variables
        ldy #0

        // Exp3
        if _exp_channels >= 3
            lda puf_exp3_stack_next
            beq done_update_exp3
            cmp puf_exp3_stack
            beq done_update_exp3
            sta puf_exp3_stack
            lda (&puf_exp3_pattern_ptr.a), y
            sta puf_exp3_note
            jsr reset_exp3
    label done_update_exp3

        // Exp2
        if _exp_channels >= 2
            lda puf_exp2_stack_next
            beq done_update_exp2
            cmp puf_exp2_stack
            beq done_update_exp2
            sta puf_exp2_stack
            lda (&puf_exp2_pattern_ptr.a), y
            sta puf_exp2_note
            jsr reset_exp2
    label done_update_exp2

        // Exp1
        if _exp_channels >= 1
            lda puf_exp1_stack_next
            beq done_update_exp1
            cmp puf_exp1_stack
            beq done_update_exp1
            sta puf_exp1_stack
            lda (&puf_exp1_pattern_ptr.a), y
            sta puf_exp1_note
            jsr reset_exp1
    label done_update_exp1

        // Noise
        lda puf_noise_stack_next
        beq done_update_noise
        cmp puf_noise_stack
        beq done_update_noise
        sta puf_noise_stack
        lda (&puf_noise_pattern_ptr.a), y
        sta puf_noise_note
        jsr reset_noise
    label done_update_noise

        // Triangle
        lda puf_triangle_stack_next
        beq done_update_triangle
        cmp puf_triangle_stack
        beq done_update_triangle
        sta puf_triangle_stack
        lda (&puf_triangle_pattern_ptr.a), y
        sta puf_triangle_note
        jsr reset_triangle
    label done_update_triangle
            
        // Square2
        lda puf_square2_stack_next
        beq done_update_square2
        cmp puf_square2_stack
        beq done_update_square2
        sta puf_square2_stack
        lda (&puf_square2_pattern_ptr.a), y
        sta puf_square2_note
        jsr reset_square2
    label done_update_square2

        // Square
        lda puf_square1_stack_next
        beq done_update_square1
        cmp puf_square1_stack
        beq done_update_square1
        sta puf_square1_stack
        lda (&puf_square1_pattern_ptr.a), y
        sta puf_square1_note
        jsr reset_square1
    label done_update_square1

        // DPCM
        lda puf_enable
        and #%10000
        beq done_dpcm
        lsr puf_dpcm_mask
        bcc done_dpcm

        inc &puf_dpcm_pattern_ptr.a
        if __illegal
            lax (&puf_dpcm_pattern_ptr.a), y
        else
            lda (&puf_dpcm_pattern_ptr.a), y
            tax
        beq silence_dpcm
        lda &puf_dpcm_rate-1, x
        and #%01001111
        sta $4010
        lda &puf_dpcm_addr-1, x
        sta $4012
        lda &puf_dpcm_length-1, x
        sta $4013
        lda #32
        sta $4011
        lsr // A = 16
    label silence_dpcm
        ora #%00001111
        sta $4015
    label done_dpcm

        lda puf_trackv_speed
        sta puf_trackv_step

        rts


    label write_instrument
        lda &puf_instrument_lo, x
        sta _stack_0, y
        lda &puf_instrument_hi, x
        sta _stack_1, y
        lda &puf_instrument_bank, x
        sta _stack_2, y
        rts


    label update_triangle_noise
        // Triangle
        lsr puf_triangle_mask
        bcc done_triangle

        lda puf_triangle_stack_next
        beq done_triangle
        eor #%00000001
        sta puf_triangle_stack_next
        inc &puf_triangle_pattern_ptr.a
        ldy #0
        if __illegal
            lax (&puf_triangle_pattern_ptr.a), y
        else
            lda (&puf_triangle_pattern_ptr.a), y
            tax
        ldy puf_triangle_stack_next
        jsr write_instrument
        inc &puf_triangle_pattern_ptr.a
    label done_triangle

        // Noise
        lsr puf_noise_mask
        bcc done_noise

        lda puf_noise_stack_next
        beq done_noise
        eor #%00000001
        sta puf_noise_stack_next
        inc &puf_noise_pattern_ptr.a
        ldy #0
        if __illegal
            lax (&puf_noise_pattern_ptr.a), y
        else
            lda (&puf_noise_pattern_ptr.a), y
            tax
        ldy puf_noise_stack_next
        jsr write_instrument
        inc &puf_noise_pattern_ptr.a
    label done_noise

        // Exp2
        if _exp_channels >= 2
            lsr puf_exp2_mask
            bcc done_exp2

            lda puf_exp2_stack_next
            beq done_exp2
            eor #%00000001
            sta puf_exp2_stack_next
            inc &puf_exp2_pattern_ptr.a
            ldy #0
            if __illegal
                lax (&puf_exp2_pattern_ptr.a), y
            else
                lda (&puf_exp2_pattern_ptr.a), y
                tax
            ldy puf_exp2_stack_next
            jsr write_instrument
            inc &puf_exp2_pattern_ptr.a
    label done_exp2

        // Exp3
        if _exp_channels >= 3
            lsr puf_exp3_mask
            bcc done_exp3

            lda puf_exp3_stack_next
            beq done_exp3
            eor #%00000001
            sta puf_exp3_stack_next
            inc &puf_exp3_pattern_ptr.a
            ldy #0
            if __illegal
                lax (&puf_exp3_pattern_ptr.a), y
            else
                lda (&puf_exp3_pattern_ptr.a), y
                tax
            ldy puf_exp3_stack_next
            jsr write_instrument
            inc &puf_exp3_pattern_ptr.a
    label done_exp3

        rts


    label update_pattern_ptrs_squares
        jsr update_pattern_ptrs
    label update_squares
        ldy #0

        // Square1
        lsr puf_square1_mask
        bcc done_square1

        lda puf_square1_stack_next
        beq done_square1
        eor #%00000001
        sta puf_square1_stack_next
        inc &puf_square1_pattern_ptr.a
        ldy #0
        if __illegal
            lax (&puf_square1_pattern_ptr.a), y
        else
            lda (&puf_square1_pattern_ptr.a), y
            tax
        ldy puf_square1_stack_next
        jsr write_instrument
        inc &puf_square1_pattern_ptr.a
    label done_square1

        // Square2
        lsr puf_square2_mask
        bcc done_square2

        lda puf_square2_stack_next
        beq done_square2
        eor #%00000001
        sta puf_square2_stack_next
        inc &puf_square2_pattern_ptr.a
        ldy #0
        if __illegal
            lax (&puf_square2_pattern_ptr.a), y
        else
            lda (&puf_square2_pattern_ptr.a), y
            tax
        ldy puf_square2_stack_next
        jsr write_instrument
        inc &puf_square2_pattern_ptr.a
    label done_square2

        // Exp1
        if _exp_channels >= 1
            lsr puf_exp1_mask
            bcc done_exp1

            lda puf_exp1_stack_next
            beq done_exp1
            eor #%00000001
            sta puf_exp1_stack_next
            inc &puf_exp1_pattern_ptr.a
            ldy #0
            if __illegal
                lax (&puf_exp1_pattern_ptr.a), y
            else
                lda (&puf_exp1_pattern_ptr.a), y
                tax
            ldy puf_exp1_stack_next
            jsr write_instrument
            inc &puf_exp1_pattern_ptr.a
    label done_exp1

        rts


    label update_pattern_ptrs
        ldy puf_pattern_left
        beq update_pattern_ptrs_dont_dec
        dec puf_pattern_left
        rts
    label update_pattern_ptrs_dont_dec

        lda (&puf_trackv_ptr.a), y
        sta &puf_square1_pattern_ptr.a
        iny
        lda (&puf_trackv_ptr.a), y
        sta &puf_square1_pattern_ptr.b
        iny
        lda (&puf_trackv_ptr.a), y
        sta &puf_square2_pattern_ptr.a
        iny
        lda (&puf_trackv_ptr.a), y
        sta &puf_square2_pattern_ptr.b
        iny
        lda (&puf_trackv_ptr.a), y
        sta &puf_triangle_pattern_ptr.a
        iny
        lda (&puf_trackv_ptr.a), y
        sta &puf_triangle_pattern_ptr.b
        iny
        lda (&puf_trackv_ptr.a), y
        sta &puf_noise_pattern_ptr.a
        iny
        lda (&puf_trackv_ptr.a), y
        sta &puf_noise_pattern_ptr.b
        iny
        lda (&puf_trackv_ptr.a), y
        sta &puf_dpcm_pattern_ptr.a
        iny
        lda (&puf_trackv_ptr.a), y
        sta &puf_dpcm_pattern_ptr.b
        if _exp_channels >= 1
            iny
            lda (&puf_trackv_ptr.a), y
            sta &puf_exp1_pattern_ptr.a
            iny
            lda (&puf_trackv_ptr.a), y
            sta &puf_exp1_pattern_ptr.b
        if _exp_channels >= 2
            iny
            lda (&puf_trackv_ptr.a), y
            sta &puf_exp2_pattern_ptr.a
            iny
            lda (&puf_trackv_ptr.a), y
            sta &puf_exp2_pattern_ptr.b
        if _exp_channels >= 3
            iny
            lda (&puf_trackv_ptr.a), y
            sta &puf_exp3_pattern_ptr.a
            iny
            lda (&puf_trackv_ptr.a), y
            sta &puf_exp3_pattern_ptr.b

        lda puf_pattern_size
        sta puf_pattern_left

        lda puf_finished
        beq update_track_ptr
        sta &return
        lda puf_enable
        bmi update_track_ptr
        jmp reset_init
    label update_track_ptr
        if __illegal
            lax &puf_trackv_ptr.a
            axs #-(_channels * 2)
        else
            lda &puf_trackv_ptr.a
            clc
            adc #_channels * 2
            tax
        lda #0
        sta puf_finished
        tay              // Set Y = 0 for mask loads.              
        adc &puf_trackv_ptr.b
        cmp puf_trackv_end+1
        bne store_track
        cpx puf_trackv_end+0
        bne store_track
        lda #1
        sta puf_finished
        lda puf_enable
        bpl ignore_track
    label loop_track
        ldx puf_trackv_start+0
        lda puf_trackv_start+1
    label store_track
        stx &puf_trackv_ptr.a
        sta &puf_trackv_ptr.b
    label ignore_track

        lda (&puf_square1_pattern_ptr.a), y
        sta puf_square1_mask
        lda (&puf_square2_pattern_ptr.a), y
        sta puf_square2_mask
        lda (&puf_triangle_pattern_ptr.a), y
        sta puf_triangle_mask
        lda (&puf_noise_pattern_ptr.a), y
        sta puf_noise_mask
        lda (&puf_dpcm_pattern_ptr.a), y
        sta puf_dpcm_mask
        if _exp_channels >= 1
            lda (&puf_exp1_pattern_ptr.a), y
            sta puf_exp1_mask
        if _exp_channels >= 2
            lda (&puf_exp2_pattern_ptr.a), y
            sta puf_exp2_mask
        if _exp_channels >= 3
            lda (&puf_exp3_pattern_ptr.a), y
            sta puf_exp3_mask
    label early_return
    label update_null
        rts

    // Call this function every frame in your NMI or whatever to play the music
    default
    label process
        lda #0
        sta &return
        lda &puf_lock
        bne early_return
        lda &arg
        sta puf_enable
        lda puf_trackv_speed
        beq play_registers

        ldy puf_bank
        switch y
        dec puf_trackv_step
        ldx puf_trackv_step
        lda track_step_function_lo, x
        sta &puf_ptr_temp.a
        lda track_step_function_hi, x
        sta &puf_ptr_temp.b
        jsr do_jump
    label play_registers

        // Square1
        lda puf_enable
        and #%0001
        beq disable_square1

        ldx puf_square1_stack
        jsr load_ptr_from_stack

        ldy puf_square1_vol_duty_y
        jsr read_macro
        sty puf_square1_vol_duty_y
        cpy #0
        bne sta_4000
        ldx puf_square1_stack
        stx puf_square1_stack_next
        jsr write_silence
        jsr reset_square1
        lda #%00110000
    label sta_4000
        sta $4000

        ldy puf_square1_pitch_y
        jsr read_macro
        sty puf_square1_pitch_y
        bpl done_square1_pitch_y
        dex
    label done_square1_pitch_y
        adc puf_square1_pitch_bend+0
        sta puf_square1_pitch_bend+0
        txa
        adc puf_square1_pitch_bend+1
        sta puf_square1_pitch_bend+1

        ldy puf_square1_arpeggio_y
        jsr read_macro
        sty puf_square1_arpeggio_y
        adc puf_square1_note
        tay
        clc
        lda (&puf_note_table_ptr.a), y
        adc puf_square1_pitch_bend+0
        sta $4002
        iny
        lda (&puf_note_table_ptr.a), y
        adc puf_square1_pitch_bend+1
        and #%00000111
        cmp puf_square1_pitch_hi
        beq done_sta_4003
        sta $4003
    label done_sta_4003
        sta puf_square1_pitch_hi
    label disable_square1

        // Square2

        lda puf_enable
        and #%0010
        beq disable_square2

        ldx puf_square2_stack
        jsr load_ptr_from_stack

        ldy puf_square2_vol_duty_y
        jsr read_macro
        sty puf_square2_vol_duty_y
        cpy #0
        bne sta_4004
        ldx puf_square2_stack
        stx puf_square2_stack_next
        jsr write_silence
        jsr reset_square2
        lda #%00110000
    label sta_4004
        sta $4004

        ldy puf_square2_pitch_y
        jsr read_macro
        sty puf_square2_pitch_y
        bpl done_square2_pitch_y
        dex
    label done_square2_pitch_y
        adc puf_square2_pitch_bend+0
        sta puf_square2_pitch_bend+0
        txa
        adc puf_square2_pitch_bend+1
        sta puf_square2_pitch_bend+1

        ldy puf_square2_arpeggio_y
        jsr read_macro
        sty puf_square2_arpeggio_y
        adc puf_square2_note
        tay
        clc
        lda (&puf_note_table_ptr.a), y
        adc puf_square2_pitch_bend+0
        sta $4006
        iny
        lda (&puf_note_table_ptr.a), y
        adc puf_square2_pitch_bend+1
        and #%00000111
        cmp puf_square2_pitch_hi
        beq done_sta_4007
        sta $4007
    label done_sta_4007
        sta puf_square2_pitch_hi
    label disable_square2

        // Triangle

        lda puf_enable
        and #%0100
        beq disable_triangle

        ldx puf_triangle_stack
        jsr load_ptr_from_stack

        ldy puf_triangle_vol_duty_y
        jsr read_macro
        sty puf_triangle_vol_duty_y
        and #%1111
        ora #%10000000
        cpy #0
        bne sta_4008
        ldx puf_triangle_stack
        stx puf_triangle_stack_next
        jsr write_silence
        jsr reset_triangle
        lda #0
    label sta_4008
        sta $4008

        ldy puf_triangle_pitch_y
        jsr read_macro
        sty puf_triangle_pitch_y
        bpl done_triangle_pitch_y
        dex
    label done_triangle_pitch_y
        adc puf_triangle_pitch_bend+0
        sta puf_triangle_pitch_bend+0
        txa
        adc puf_triangle_pitch_bend+1
        sta puf_triangle_pitch_bend+1

        ldy puf_triangle_arpeggio_y
        jsr read_macro
        sty puf_triangle_arpeggio_y
        adc puf_triangle_note
        tay
        clc
        lda (&puf_note_table_ptr.a), y
        adc puf_triangle_pitch_bend+0
        sta $400A
        iny
        lda (&puf_note_table_ptr.a), y
        adc puf_triangle_pitch_bend+1
        and #%00000111
        sta $400B
    label disable_triangle

        // Noise

        lda puf_enable
        and #%1000
        beq disable_noise

        lda #$FF
        sta $400F

        ldx puf_noise_stack
        jsr load_ptr_from_stack

        ldy puf_noise_vol_duty_y
        jsr read_macro
        sty puf_noise_vol_duty_y
        if __illegal
            ldx #%11000000
            sax puf_temp
        else
            tax
            and #%11000000
            sta puf_temp
            txa
        and #%1111
        ora #%00110000
        cpy #0
        bne sta_400c
        ldx puf_noise_stack
        stx puf_noise_stack_next
        jsr write_silence
        jsr reset_noise
        lda #%00110000
    label sta_400c
        sta $400C

        jsr skip_macro

        ldy puf_noise_arpeggio_y
        jsr read_macro
        sty puf_noise_arpeggio_y
        lsr
        eor #$FF
        sec
        adc puf_noise_note
        and #%1111
        ora puf_temp
        sta $400E
    label disable_noise

        /////////////////////
        // Expansion Audio //
        /////////////////////
    
        if __expansion_audio != 0
            bit puf_enable
            bvs process_expansion
            rts

    label process_expansion

        // Exp1
        if _exp_channels >= 1
            ldx puf_exp1_stack
            jsr load_ptr_from_stack

            ldy puf_exp1_vol_duty_y
            jsr read_macro
            sty puf_exp1_vol_duty_y
            cpy #0
            bne sta_exp1_vol_duty
            ldx puf_exp1_stack
            stx puf_exp1_stack_next
            jsr write_silence
            jsr reset_exp1
            if __expansion_audio == _MMC5
                lda #%00110000
            if __expansion_audio == _RNBW
                lda #0
    label sta_exp1_vol_duty
        if _exp_channels >= 1
            if __expansion_audio == _MMC5
                sta $5000
            if __expansion_audio == _RNBW
                sta $41A0

            ldy puf_exp1_pitch_y
            jsr read_macro
            sty puf_exp1_pitch_y
            bpl done_exp1_pitch_y
            dex
    label done_exp1_pitch_y
        if _exp_channels >= 1
            adc puf_exp1_pitch_bend+0
            sta puf_exp1_pitch_bend+0
            txa
            adc puf_exp1_pitch_bend+1
            sta puf_exp1_pitch_bend+1

            ldy puf_exp1_arpeggio_y
            jsr read_macro
            sty puf_exp1_arpeggio_y
            adc puf_exp1_note
            tay
            clc
            lda (&puf_note_table_ptr.a), y
            adc puf_exp1_pitch_bend+0
            if __expansion_audio == _MMC5
                sta $5002
            if __expansion_audio == _RNBW
                sta $41A1
            iny
            lda (&puf_note_table_ptr.a), y
            adc puf_exp1_pitch_bend+1
            if __expansion_audio == _RNBW
                ora #%10000000
                and #%10001111
            else
                and #%10000111
            if __expansion_audio != _RNBW
                cmp puf_exp1_pitch_hi
                beq done_sta_exp1_pitch
            if __expansion_audio == _MMC5
                sta $5003
            if __expansion_audio == _RNBW
                sta $41A2
    label done_sta_exp1_pitch
        if _exp_channels >= 1 && __expansion_audio != _RNBW
            sta puf_exp1_pitch_hi

        // Exp2
        if _exp_channels >= 2
            ldx puf_exp2_stack
            jsr load_ptr_from_stack

            ldy puf_exp2_vol_duty_y
            jsr read_macro
            sty puf_exp2_vol_duty_y
            cpy #0
            bne sta_exp2_vol_duty
            ldx puf_exp2_stack
            stx puf_exp2_stack_next
            jsr write_silence
            jsr reset_exp2
            if __expansion_audio == _MMC5
                lda #%00110000
            if __expansion_audio == _RNBW
                lda #0
    label sta_exp2_vol_duty
        if _exp_channels >= 2
            if __expansion_audio == _MMC5
                sta $5004
            if __expansion_audio == _RNBW
                sta $41A3

            ldy puf_exp2_pitch_y
            jsr read_macro
            sty puf_exp2_pitch_y
            bpl done_exp2_pitch_y
            dex
    label done_exp2_pitch_y
        if _exp_channels >= 2
            adc puf_exp2_pitch_bend+0
            sta puf_exp2_pitch_bend+0
            txa
            adc puf_exp2_pitch_bend+1
            sta puf_exp2_pitch_bend+1

            ldy puf_exp2_arpeggio_y
            jsr read_macro
            sty puf_exp2_arpeggio_y
            adc puf_exp2_note
            tay
            clc
            lda (&puf_note_table_ptr.a), y
            adc puf_exp2_pitch_bend+0
            if __expansion_audio == _MMC5
                sta $5006
            if __expansion_audio == _RNBW
                sta $41A4
            iny
            lda (&puf_note_table_ptr.a), y
            adc puf_exp2_pitch_bend+1
            if __expansion_audio == _RNBW
                ora #%10000000
                and #%10001111
            else
                and #%10000111
            if __expansion_audio != _RNBW
                cmp puf_exp2_pitch_hi
                beq done_sta_exp2_pitch
            if __expansion_audio == _MMC5
                sta $5007
            if __expansion_audio == _RNBW
                sta $41A5
    label done_sta_exp2_pitch
        if _exp_channels >= 2 && __expansion_audio != _RNBW
            sta puf_exp2_pitch_hi

        // Exp3
        if _exp_channels >= 3
            ldx puf_exp3_stack
            jsr load_ptr_from_stack

            ldy puf_exp3_vol_duty_y
            jsr read_macro
            sty puf_exp3_vol_duty_y
            cpy #0
            bne sta_exp3_vol_duty
            ldx puf_exp3_stack
            stx puf_exp3_stack_next
            jsr write_silence
            jsr reset_exp3
            if __expansion_audio == _RNBW
                lda #0
    label sta_exp3_vol_duty
        if _exp_channels >= 3
            if __expansion_audio == _RNBW
                asl
                asl
                and #%111111
                sta $41A6
            ldy puf_exp3_pitch_y
            jsr read_macro
            sty puf_exp3_pitch_y
            bpl done_exp3_pitch_y
            dex
    label done_exp3_pitch_y
        if _exp_channels >= 3
            adc puf_exp3_pitch_bend+0
            sta puf_exp3_pitch_bend+0
            txa
            adc puf_exp3_pitch_bend+1
            sta puf_exp3_pitch_bend+1

            ldy puf_exp3_arpeggio_y
            jsr read_macro
            sty puf_exp3_arpeggio_y
            adc puf_exp3_note
            tay
            clc
            lda (&puf_note_table_ptr.a), y
            adc puf_exp3_pitch_bend+0
            if __expansion_audio == _RNBW
                sta $41A7
            iny
            lda (&puf_note_table_ptr.a), y
            adc puf_exp3_pitch_bend+1
            if __expansion_audio == _RNBW
                ora #%10000000
                and #%10001111
            if __expansion_audio != _RNBW
                cmp puf_exp3_pitch_hi
                beq done_sta_exp3_pitch
            if __expansion_audio == _RNBW
                sta $41A8
    label done_sta_exp3_pitch
        if _exp_channels >= 3 && __expansion_audio != _RNBW
            sta puf_exp3_pitch_hi

        rts

    label load_ptr_from_stack
        lda _stack_0, x
        sta &puf_ptr_temp.a
        lda _stack_1, x
        sta &puf_ptr_temp.b
        ldy _stack_2, x
        switch y
        rts

    label write_silence
        lda #puf_silent_instrument.a
        sta _stack_0, x
        lda #puf_silent_instrument.b
        sta _stack_1, x
        lda #puf_silent_instrument.bank
        sta _stack_2, x
    label fail_lock
        rts

    label do_jump
        jmp (&puf_ptr_temp.a)

    label init
        lda &arg
        cmp #SYSTEM_PAL
        beq init_pal
        // fall-through
    label init_ntsc
        ldy #(&puf_ntsc_note_table).a
        ldx #(&puf_ntsc_note_table).b
    label store_init
        inc &puf_lock
        sty &puf_note_table_ptr.a
        stx &puf_note_table_ptr.b
        jsr reset_init
        jmp unlock

    label init_pal
        ldy #(&puf_pal_note_table).a
        ldx #(&puf_pal_note_table).b
        jmp store_init

    label stop
        inc &puf_lock
        jsr reset_init
        jmp unlock

    label reset_init
        ldx #0
        stx puf_trackv_speed
        inx // X = 1
        stx puf_finished
        stx puf_trackv_step

        ldx #puf_instrument_ptrs.a+1
        stx puf_noise_stack
        stx puf_noise_stack_next
        ldx #puf_instrument_ptrs.a+3
        lda puf_square1_stack_next
        stx puf_triangle_stack
        stx puf_triangle_stack_next
        ldx #puf_instrument_ptrs.a+5
        stx puf_square2_stack
        stx puf_square2_stack_next
        ldx #puf_instrument_ptrs.a+7
        stx puf_square1_stack
        stx puf_square1_stack_next
        if _exp_channels >= 1
            ldx #puf_instrument_ptrs.a+9
            stx puf_exp1_stack
            stx puf_exp1_stack_next
        if _exp_channels >= 2
            ldx #puf_instrument_ptrs.a+11
            stx puf_exp2_stack
            stx puf_exp2_stack_next
        if _exp_channels >= 3
            ldx #puf_instrument_ptrs.a+13
            stx puf_exp3_stack
            stx puf_exp3_stack_next

        lda #puf_silent_instrument.a
        sta puf_instrument_ptrs+1
        sta puf_instrument_ptrs+3
        sta puf_instrument_ptrs+5
        sta puf_instrument_ptrs+7
        if _exp_channels >= 1
            sta puf_instrument_ptrs+9
        if _exp_channels >= 2
            sta puf_instrument_ptrs+11
        if _exp_channels >= 3
            sta puf_instrument_ptrs+13

        lda #puf_silent_instrument.b
        sta puf_instrument_ptrs+1+_note_channels*2
        sta puf_instrument_ptrs+3+_note_channels*2
        sta puf_instrument_ptrs+5+_note_channels*2
        sta puf_instrument_ptrs+7+_note_channels*2
        if _exp_channels >= 1
            sta puf_instrument_ptrs+9+_note_channels*2
        if _exp_channels >= 2
            sta puf_instrument_ptrs+11+_note_channels*2
        if _exp_channels >= 3
            sta puf_instrument_ptrs+13+_note_channels*2

        lda #puf_silent_instrument.bank
        sta puf_instrument_ptrs+1+_note_channels*4
        sta puf_instrument_ptrs+3+_note_channels*4
        sta puf_instrument_ptrs+5+_note_channels*4
        sta puf_instrument_ptrs+7+_note_channels*4
        if _exp_channels >= 1
            sta puf_instrument_ptrs+9+_note_channels*4
        if _exp_channels >= 2
            sta puf_instrument_ptrs+11+_note_channels*4
        if _exp_channels >= 3
            sta puf_instrument_ptrs+13+_note_channels*4
        sta puf_bank

        if _exp_channels >= 1
            jsr reset_exp1
        if _exp_channels >= 2
            jsr reset_exp2
        if _exp_channels >= 3
            jsr reset_exp3

        jsr reset_square1
        jsr reset_square2
        jsr reset_triangle
        jmp reset_noise


    label play_track
        inc &puf_lock

        jsr reset_init
        dec puf_finished // puf_finished = 0

        ldx &arg
        ldy &puf_tracks_bank, x
        sty puf_bank
        switch y // Assume this clobbers every register.
        ldx &arg // Reload

        lda &puf_tracks_speed, x
        sta &return
        jsr set_speed_from_a
        sta puf_trackv_step // speed is in A

        lda &puf_tracks_pattern_size, x
        sta puf_pattern_size

        lda &puf_tracks_begin_lo, x
        sta &puf_trackv_ptr.a
        sta puf_trackv_start+0
        lda &puf_tracks_begin_hi, x
        sta &puf_trackv_ptr.b
        sta puf_trackv_start+1

        lda &puf_tracks_end_lo, x
        sta puf_trackv_end+0
        lda &puf_tracks_end_hi, x
        sta puf_trackv_end+1

        lda #%00001000
        sta $4001
        sta $4005

        ldx #%10000000
        stx $4008

        lda #%11111
        sta puf_enable
        lsr // A = %1111
        sta $4015
        if __expansion_audio == _MMC5
            sta $5015

        if __illegal
            // SAX = store 0
            sax puf_pattern_left
        else
            lda #0
            sta puf_pattern_left

        jsr update_pattern_ptrs
        jsr update_squares
        jsr update_triangle_noise
        jsr update_variables
        // fall-through
    label unlock
        dec &puf_lock
        rts

    label set_speed
        lda &arg
    label set_speed_from_a
        cmp #4
        bcs store_speed
        cmp #2
        bcs double_speed
        lda #34
        bne store_speed
    label double_speed
        adc #30-1
    label store_speed
        sta puf_trackv_speed // Return with value in A
        rts
        

