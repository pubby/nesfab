/*
 * Copyright (c) 2023, Patrick Bene
 * This file is distributed under the Boost Software License, Version 1.0.
 * See LICENSE_1_0.txt or https://www.boost.org/LICENSE_1_0.txt 
 */

// Code for decompressing strings.

struct DecompressStringState
    CCC/strings ptr
    U skip

vars /decompress_string
    DecompressStringState decompress_string_state
    
// Prepares a string to be decompressed.
// Call this before 'decompress_string'
fn decompress_string_init(CCC/strings str)
    decompress_string_state = DecompressStringState(str, 0)

// Decompresses a single character of the string, returning it.
asm fn decompress_string() U
: employs /strings /decompress_string
: +static_fixed
    vars
        U stack

    // You can replace 'charmap' below with the name of the charmap you want.
    ct U SIZE = charmap.size
    label byte_pairs_first
        U[](charmap.pairs.a)
    label byte_pairs_second
        U[](charmap.pairs.b)

    default
        if __fixed
            push
        tsx
        stx &stack
        ldx &decompress_string_state.ptr.bank
        switch x
        ldy #0
    label loop
        lda (&decompress_string_state.ptr.a), y
        jsr process_byte
        inc &decompress_string_state.ptr.a
        bne done_inc
        inc &decompress_string_state.ptr.b
    label done_inc
        ldy #0
        sty &decompress_string_state.skip
        beq loop // always jumps

    label pair
        tax
        lda byte_pairs_second - SIZE, x
        pha
        lda byte_pairs_first - SIZE, x
        jsr process_byte
        pla
    label process_byte
        if charmap.offset != 0
            sec
            sbc #charmap.offset
        cmp #SIZE
        bcs pair
        cpy &decompress_string_state.skip
        iny
        bcc sub_return
        sty &decompress_string_state.skip
        if charmap.offset != 0
            adc #charmap.offset - 1
        sta &return
        ldx &stack
        txs
        if __fixed
            pop
    label sub_return
        rts

