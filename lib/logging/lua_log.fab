/*
 * Copyright (c) 2024, Patrick Bene
 * This file is distributed under the Boost Software License, Version 1.0.
 * See LICENSE_1_0.txt or https://www.boost.org/LICENSE_1_0.txt 
 */

// This code can be used with the 'lua_log.lua' script to write logs
// that can be seen inside emulators.

// Original code by Julius Riecke (Miau), original copyright him.

ct AA LOG_WRITE_HOOK_ADDR  =  $00
ct AA LOG_ARG_STORAGE_ADDR = $100

// Copies a value to arg storage, so that it's visible to the lua logger.
fn log_arg(U i, UU arg)
: +inline
    UU addr = UU(LOG_ARG_STORAGE_ADDR) + UU(i << 1)
    {addr}(arg.a)
    {addr+1}(arg.b)

// Logs a string
fn log(PPP/ascii str)
: -inline
    U i = 0
    while true
        {LOG_WRITE_HOOK_ADDR}(str[i])
        if str[i] == ascii.sentinel
            break
        i += 1

// Logs an integer as a decimal
fn log_dec(UU n)
    log_arg(0, n)
    log(@"%d"ascii)

// Logs an integer as hex
fn log_hex(UU n)
    log_arg(0, n)
    log(@"$%04X"ascii)

//
// The 'logf' functions print strings with up to 4 arguments.
// 'str' supports printf-style format. See Lua's string.format.
// e.g. logf2("here's some variables: %u hex:%04X", var1, var2)
//

// 2 arguments
fn log_1(PPP/ascii str, UU a)
  log_arg(0, a)
  log(str)

// 2 arguments
fn log_2(PPP/ascii str, UU a, UU b)
  log_arg(0, a)
  log_arg(1, b)
  log(str)

// 3 arguments
fn log_3(PPP/ascii str, UU a, UU b, UU c)
  log_arg(0, a)
  log_arg(1, b)
  log_arg(2, c)
  log(str)

// 4 arguments
fn log_4(PPP/ascii str, UU a, UU b, UU c, UU d)
  log_arg(0, a)
  log_arg(1, b)
  log_arg(2, c)
  log_arg(3, d)
  log(str)
