/*
 * Copyright (c) 2025, Patrick Bene
 * This file is distributed under the Boost Software License, Version 1.0.
 * See LICENSE_1_0.txt or https://www.boost.org/LICENSE_1_0.txt 
 */

// Shifts 1 to the left by 'i' places.
// 'i' must be in the range [0, 7]
fn flag_bit_u(U i) U
    ct U[8] table = U[8](1<<0, 1<<1, 1<<2, 1<<3, 1<<4, 1<<5, 1<<6, 1<<7)
    return table[i]

// Shifts 0 to the left by 'i' places.
// 'i' must be in the range [0, 7]
fn flag_mask_u(U i) U
    ct U[8] table = U[8](~U(1<<0), ~U(1<<1), ~U(1<<2), ~U(1<<3), ~U(1<<4), ~U(1<<5), ~U(1<<6), ~U(1<<7))
    return table[i]

// Shifts 1 to the left by 'i' places.
// 'i' must be in the range [0, 15]
fn flag_bit_uu(U i) UU
    ct UU[16] table = UU[16](1<<0, 1<<1, 1<<2, 1<<3, 1<<4, 1<<5, 1<<6, 1<<7,
                             1<<8, 1<<9, 1<<10, 1<<11, 1<<12, 1<<13, 1<<14, 1<<15)
    return table[i]

// Shifts 0 to the left by 'i' places.
// 'i' must be in the range [0, 15]
fn flag_mask_uu(U i) UU
    ct UU[16] table = UU[16](
        ~U(1<<0), ~U(1<<1), ~U(1<<2), ~U(1<<3), ~U(1<<4), ~U(1<<5), ~U(1<<6), ~U(1<<7),
        ~U(1<<8), ~U(1<<9), ~U(1<<10), ~U(1<<11), ~U(1<<12), ~U(1<<13), ~U(1<<14), ~U(1<<15))
    return table[i]

// Returns the number of bits set in the lower 4 bits of 'i':
fn popcount_nybble(U i) U
: +inline
    ct U[16] table = U[16](0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4)
    return table[i & $F]

// Returns the number of bits set in 'i':
fn popcount(U i) U
: -inline
    U count = 0
    while i
        i >>= 1
        count += 1
    return count
