/*
 * Copyright (c) 2023, Patrick Bene
 * This file is distributed under the Boost Software License, Version 1.0.
 * See LICENSE_1_0.txt or https://www.boost.org/LICENSE_1_0.txt 
 */

// Code implementing a few functions from trigonometry.
// Angles are implemented as values of type U, with 256 increments equaling 360 degrees.

// Used to implement 'sin' and 'cos':
ct F[65] half_sin_table = F[65](
    0,         0.0122706, 0.0245338, 0.0367823, 
    0.0490086, 0.0612053, 0.0733652, 0.0854809, 
    0.0975452, 0.109551,  0.12149,   0.133356, 
    0.145142,  0.156841,  0.168445,  0.179948, 
    0.191342,  0.202621,  0.213778,  0.224806, 
    0.235698,  0.246449,  0.257051,  0.267499, 
    0.277785,  0.287904,  0.29785,   0.307616, 
    0.317197,  0.326586,  0.335779,  0.34477, 
    0.353553,  0.362124,  0.370476,  0.378604, 
    0.386505,  0.394173,  0.401604,  0.408792, 
    0.415735,  0.422427,  0.428864,  0.435043, 
    0.440961,  0.446612,  0.451995,  0.457105, 
    0.46194,   0.466496,  0.470772,  0.474764, 
    0.47847,   0.481888,  0.485016,  0.487851, 
    0.490393,  0.492639,  0.494588,  0.49624, 
    0.497592,  0.498645,  0.499398,  0.499849, 
    0.5)


// Sine.
//   sin(0)  = 0
//   sin(64) = 1
fn sin(U v) SF
: -inline
    SF result = _abs_sin(v)
    if v & 128
        result = -result
    return result

// Cosine:
//   cos(0)  = 1
//   cos(64) = 0
fn cos(U v) SF
: +inline
    return sin(v + 64)

fn _abs_sin(U v) SF
: +inline
    U index
    if v & 64
        index = 64 - (v & 63)
    else
        index = v & 63
    return SF(half_sin_table[index]) << 1

fn abs_sin(U v) SF
: -inline
    return _abs_sin(v)

fn abs_cos(U v) SF
: +inline
    return abs_sin(v + 64)

// Used to implement atan and atan2.
ct U[256] atan_table = U[256](
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    64, 32, 19, 13, 10, 8, 7, 6, 5, 5, 4, 4, 3, 3, 3, 3, 
    64, 45, 32, 24, 19, 16, 13, 11, 10, 9, 8, 7, 7, 6, 6, 5, 
    64, 51, 40, 32, 26, 22, 19, 16, 15, 13, 12, 11, 10, 9, 9, 8, 
    64, 54, 45, 38, 32, 27, 24, 21, 19, 17, 16, 14, 13, 12, 11, 11, 
    64, 56, 48, 42, 37, 32, 28, 25, 23, 21, 19, 17, 16, 15, 14, 13, 
    64, 57, 51, 45, 40, 36, 32, 29, 26, 24, 22, 20, 19, 18, 16, 16, 
    64, 58, 53, 48, 43, 39, 35, 32, 29, 27, 25, 23, 22, 20, 19, 18, 
    64, 59, 54, 49, 45, 41, 38, 35, 32, 30, 27, 26, 24, 22, 21, 20, 
    64, 59, 55, 51, 47, 43, 40, 37, 34, 32, 30, 28, 26, 25, 23, 22, 
    64, 60, 56, 52, 48, 45, 42, 39, 37, 34, 32, 30, 28, 27, 25, 24, 
    64, 60, 57, 53, 50, 47, 44, 41, 38, 36, 34, 32, 30, 29, 27, 26, 
    64, 61, 57, 54, 51, 48, 45, 42, 40, 38, 36, 34, 32, 30, 29, 27, 
    64, 61, 58, 55, 52, 49, 46, 44, 42, 39, 37, 35, 34, 32, 30, 29, 
    64, 61, 58, 55, 53, 50, 48, 45, 43, 41, 39, 37, 35, 34, 32, 31, 
    64, 61, 59, 56, 53, 51, 48, 46, 44, 42, 40, 38, 37, 35, 33, 32)

// Arctangent of y/x.
// 'y' and 'x' must be in the range [0, 15], representing triangle side lengths.
// Note: 'atan2' or 'point_dir' are far easier to use!
fn atan(U y, U x) U
: +inline
    return atan_table[x | (y << 4)]

// Arctangent, with adjustments to handle all 4 quadrants.
// This can be used to determine the angle between two points
// (although 'point_dir' works too!).
fn atan2(SS y, SS x) U
: -inline
    U quadrant = 0
    if x < 0
        quadrant |= 1
        x = -x
    if y < 0
        quadrant |= 2
        y = -y

    while UU(x) >= 16 || UU(y) >= 16
        x = SS(UU(x) >> 1)
        y = SS(UU(y) >> 1)
    U result = atan(y.a, x.a)

    switch quadrant
        case 0
            return result
        case 1
            return 128 - result
        case 2
            return -result
        case 3
            return 128 + result

// Returns the direction between two points:
fn point_dir(SS from_x, SS from_y, SS to_x, SS to_y) U
: +inline
    return atan2(to_y - from_y, to_x - from_x)

