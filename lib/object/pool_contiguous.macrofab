/*
 * Copyright (c) 2023, Patrick Bene
 * This file is distributed under the Boost Software License, Version 1.0.
 * See LICENSE_1_0.txt or https://www.boost.org/LICENSE_1_0.txt 
 */

// This macro implements an object pool represented as an array with no gaps 
// between live objects. Because objects are moved around to fill gaps, 
// indexes to objects in this pool are not stable and will get invalidated
// when deleting other objects. Still, this is often the best pool design.

// Macro parameters:
#:type:#        // The type of each object (probably a struct type).
#:max_objects:# // The maximum number of objects that can exist at once (but not more than 254)
#:name:#        // The name of the objects (e.g. "enemies")
#:group:#       // The optional vars group to insert variables in.

ct Int #name#_max = #max_objects#

vars #group#
    U #name#_num = 0
    #type#[#max_objects#] #name#

// Removes all objects:
fn #name#_clear()
: +inline
    #name#_num = 0

// Removes the object at position 'index'.
// Invalidates the last object's index.
// When calling this while iterating, 'index' should not be incremented.
fn #name#_delete(U index)
: +inline
    #name#_num -= 1
    #name#[index] = #name#[#name#_num]

// Creates an object, returning its index but not assigning to it.
// If no more objects can be created, returns BAD_OBJECT.
fn #name#_alloc() U
: -inline
    if #name#_num == #name#_max
        return BAD_OBJECT
    U index = #name#_num
    #name#_num += 1
    return index

// Creates and assigns an object, returning its index.
// If no more objects can be created, returns BAD_OBJECT.
fn #name#_new(#type# value) U
: +inline
    if #name#_num == #name#_max
        return BAD_OBJECT
    U index = #name#_num
    #name#[index] = value
    #name#_num += 1
    return index

// Returns true if the object at position 'index' is allocated:
fn #name#_exists(U index) Bool
: +inline
    return index < #name#_num

// Returns the index of the first object equal to 'value':
fn #name#_find(#type# value) U
    for U i = 0; i < #name#_num; i += 1
        if #name#[i] == value
            return i
    return BAD_OBJECT

// Replaces all objects equeal to 'from' with 'to':
fn #name#_replace_matching(#type# from, #type# to)
    for U i = 0; i < #name#_num; i += 1
        if #name#[i] == from
            #name#[i] = to

// Removes all objects equal to 'value':
fn #name#_delete_matching(#type# value)
    for U i = 0; i < #name#_num;
        if #name#[i] == value
            #name#_delete(i)
        else
            i += 1
