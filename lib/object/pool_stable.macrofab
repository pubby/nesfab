/*
 * Copyright (c) 2023, Patrick Bene
 * This file is distributed under the Boost Software License, Version 1.0.
 * See LICENSE_1_0.txt or https://www.boost.org/LICENSE_1_0.txt 
 */

// This macro implements an object pool represented as two arrays:
// one for the objects, and another tracking if they're live or not.
// Indexes to objects in this pool are stable; they won't get invalidated.
// This version uses one byte per object. See "pool_stable_compact.macrofab"
// for a version that is more memory efficient.

// Macro parameters:
#:type:#        // The type of each object (probably a struct type).
#:max_objects:# // The maximum number of objects that can exist at once
#:name:#        // The name of the objects (e.g. "enemies")
#:group:#       // The optional vars group to insert variables in.

ct Int #name#_max = #max_objects#

vars #group#
    Bool[#max_objects#] #name#_allocated = Bool[#max_objects#](false)
    #type#[#max_objects#] #name#

// Removes all objects:
fn #name#_clear()
: +inline
    #name#_allocated = Bool[#max_objects#](false)

// Removes the object at position 'index'.
fn #name#_delete(I.#name# index)
: +inline
    #name#_allocated[U(index)] = false

// Creates an object, returning its index but not assigning to it.
// If no more objects can be created, returns BAD_OBJECT.
fn #name#_alloc() I.#name#
: -inline
    for U i = 0; i < #name#_max; i += 1
        if !#name#_exists(i)
            #name#_allocated[i] = true
            return i
    return BAD_OBJECT

// Creates and assigns an object, returning its index.
// If no more objects can be created, returns BAD_OBJECT.
fn #name#_new(#type# value) U
: +inline
    I.#name# i = #name#_alloc()
    if i != BAD_OBJECT
        i[] = value
    return U(i)

// Returns true if the object at position 'index' is allocated:
fn #name#_exists(I.#name# index) Bool
: +inline
    return #name#_allocated[U(index)]

// Returns the number of objects matching 'value':
fn #name#_count(#type# value) U
    U count = 0
    for U i = 0; i < #name#_max; i += 1
        if #name#_exists(i) && #name#[i] == value
            count += 1
    return count

// Returns the index of the first object equal to 'value',
// or BAD_OBJECT if one doesn't exist:
fn #name#_find(#type# value) I.#name#
    for U i = 0; i < #name#_max; i += 1
        if #name#_exists(i) && #name#[i] == value
            return i
    return BAD_OBJECT

// Removes all objects equal to 'value':
// Invalidates object indexes (when deleting).
fn #name#_cull(#type# value)
    for U i = 0; i < #name#_max;
        if #name#_exists(i) && #name#[i] == value
            #name#_delete(i)
        else
            i += 1

// Replaces all objects equal to 'from' with 'to':
fn #name#_replace(#type# from, #type# to)
    for U i = 0; i < #name#_max; i += 1
        if #name#_exists(i) && #name#[i] == from
            #name#[i] = to
