/*
 * Copyright (c) 2023, Patrick Bene
 * This file is distributed under the Boost Software License, Version 1.0.
 * See LICENSE_1_0.txt or https://www.boost.org/LICENSE_1_0.txt 
 */

// This macro implements an object pool represented as two arrays:
// one for the objects, and another tracking if they're live or not.
// Indexes to objects in this pool are stable; they won't get invalidated.
// This version uses one byte per 8 objects. See "pool_stable.macrofab"
// for a version that is less memory efficient, but simpler.

// Macro parameters:
#:type:#        // The type of each object (probably a struct type).
#:max_objects:# // The maximum number of objects that can exist at once
#:name:#        // The name of the objects (e.g. "enemies")
#:group:#       // The optional vars group to insert variables in.

ct Int #name#_max = #max_objects#
ct Int #name#_bitset_size = ((#max_objects#) + 7) >> 3

vars #group#
    U[#name#_bitset_size] #name#_allocated = U[#name#_bitset_size](0)
    #type#[#max_objects#] #name#

// Removes all objects:
fn #name#_clear()
: +inline
    #name#_allocated = U[#name#_bitset_size](0)

// Removes the object at position 'index'.
fn #name#_delete(I.#name# index)
: +inline
    #name#_allocated[U(index) >> 3] &= INVERSE_OBJECT_POOL_MASKS[U(index) & %111]

// Creates an object, returning its index but not assigning to it.
// If no more objects can be created, returns BAD_OBJECT.
fn #name#_alloc() U
: -inline
    for U i = 0; i < #name#_max; i += 1
        if !#name#_exists(i)
            #name#_allocated[i >> 3] |= OBJECT_POOL_MASKS[i & %111]
            return i
    return BAD_OBJECT

// Creates an object, returning its index.
// If no more objects can be created, returns BAD_OBJECT.
fn #name#_new(#type# value) U
: +inline
    for U i = 0; i < #name#_max; i += 1
        if !#name#_exists(i)
            #name#_allocated[i >> 3] |= OBJECT_POOL_MASKS[i & %111]
            #name#[i >> 3] = value
            return i
    return BAD_OBJECT

// Returns true if the object at position 'index' is allocated:
fn #name#_exists(I.#name# index) Bool
: +inline
    return #name#_allocated[U(index) >> 3] & OBJECT_POOL_MASKS[U(index) & %111]
